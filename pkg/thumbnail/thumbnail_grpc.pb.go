// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package thumbnail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThumbnailApiServiceClient is the client API for ThumbnailApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbnailApiServiceClient interface {
	GetThumbnail(ctx context.Context, in *GetThumbnailRequset, opts ...grpc.CallOption) (ThumbnailApiService_GetThumbnailClient, error)
}

type thumbnailApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbnailApiServiceClient(cc grpc.ClientConnInterface) ThumbnailApiServiceClient {
	return &thumbnailApiServiceClient{cc}
}

func (c *thumbnailApiServiceClient) GetThumbnail(ctx context.Context, in *GetThumbnailRequset, opts ...grpc.CallOption) (ThumbnailApiService_GetThumbnailClient, error) {
	stream, err := c.cc.NewStream(ctx, &ThumbnailApiService_ServiceDesc.Streams[0], "/thumbnail.ThumbnailApiService/GetThumbnail", opts...)
	if err != nil {
		return nil, err
	}
	x := &thumbnailApiServiceGetThumbnailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ThumbnailApiService_GetThumbnailClient interface {
	Recv() (*GetThumbnailResponse, error)
	grpc.ClientStream
}

type thumbnailApiServiceGetThumbnailClient struct {
	grpc.ClientStream
}

func (x *thumbnailApiServiceGetThumbnailClient) Recv() (*GetThumbnailResponse, error) {
	m := new(GetThumbnailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ThumbnailApiServiceServer is the server API for ThumbnailApiService service.
// All implementations must embed UnimplementedThumbnailApiServiceServer
// for forward compatibility
type ThumbnailApiServiceServer interface {
	GetThumbnail(*GetThumbnailRequset, ThumbnailApiService_GetThumbnailServer) error
	mustEmbedUnimplementedThumbnailApiServiceServer()
}

// UnimplementedThumbnailApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThumbnailApiServiceServer struct {
}

func (UnimplementedThumbnailApiServiceServer) GetThumbnail(*GetThumbnailRequset, ThumbnailApiService_GetThumbnailServer) error {
	return status.Errorf(codes.Unimplemented, "method GetThumbnail not implemented")
}
func (UnimplementedThumbnailApiServiceServer) mustEmbedUnimplementedThumbnailApiServiceServer() {}

// UnsafeThumbnailApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbnailApiServiceServer will
// result in compilation errors.
type UnsafeThumbnailApiServiceServer interface {
	mustEmbedUnimplementedThumbnailApiServiceServer()
}

func RegisterThumbnailApiServiceServer(s grpc.ServiceRegistrar, srv ThumbnailApiServiceServer) {
	s.RegisterService(&ThumbnailApiService_ServiceDesc, srv)
}

func _ThumbnailApiService_GetThumbnail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetThumbnailRequset)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThumbnailApiServiceServer).GetThumbnail(m, &thumbnailApiServiceGetThumbnailServer{stream})
}

type ThumbnailApiService_GetThumbnailServer interface {
	Send(*GetThumbnailResponse) error
	grpc.ServerStream
}

type thumbnailApiServiceGetThumbnailServer struct {
	grpc.ServerStream
}

func (x *thumbnailApiServiceGetThumbnailServer) Send(m *GetThumbnailResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ThumbnailApiService_ServiceDesc is the grpc.ServiceDesc for ThumbnailApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThumbnailApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thumbnail.ThumbnailApiService",
	HandlerType: (*ThumbnailApiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetThumbnail",
			Handler:       _ThumbnailApiService_GetThumbnail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/thumbnail.proto",
}
